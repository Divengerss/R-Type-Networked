name: Compilation CMake multi-platform

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        cmake_version: [3.21.2]

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Restore Vcpkg cache (Ubuntu, macOS)
      id: vcpkg-cache
      uses: actions/cache@v3
      with:
        path: |
          ./vcpkg/packages/
          ./vcpkg/installed/
          CMake
          libtool
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('./vcpkg/vcpkg.json') }}
        restore-keys: ${{ runner.os }}-vcpkg-
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
    
    - name: Restore Vcpkg cache (Windows)
      id: vcpkg-cache-windows
      uses: actions/cache@v3
      with:
        path: |
          ./vcpkg/packages/
          ./vcpkg/installed/
          CMake
          libtool
          C:\Program Files\CMake\
          C:\ProgramData\chocolatey\lib\cmake
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('./vcpkg/vcpkg.json') }}
        restore-keys: ${{ runner.os }}-vcpkg-
      if: matrix.os == 'windows-latest'

    - name: Clean up potential directory (Ubuntu, macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: rm -rf build
      continue-on-error: true

    - name: Clean up potential directory (Windows)
      run: Remove-Item -Path "build" -Recurse -Force
      if: matrix.os == 'windows-latest'
      continue-on-error: true

    - name: Update to latest packages
      run: sudo apt-get update -y
      if: matrix.os == 'ubuntu-latest'

    - name: Initialize and update vcpkg submodule
      run: git submodule update --init --recursive
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

    - name: Install CMake (Ubuntu)
      run: sudo apt-get -y install cmake
      if: matrix.os == 'ubuntu-latest'

    - name: Install CMake (macOS)
      if: matrix.os == 'macOS-latest'
      run: brew install cmake

    - name: Install CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install cmake --version ${{ matrix.cmake_version }} --install-arguments 'ADD_CMAKE_TO_PATH=System'

    - name: Install Libtools (Ubuntu)
      run: sudo apt-get -y install autoconf automake libtool pkg-config
      if: matrix.os == 'ubuntu-latest'

    - name: Install Libtools (macOS)
      run: brew install autoconf automake libtool pkg-config
      if: matrix.os == 'macOS-latest'

    - name: Install system X libraries and OpenGL (Ubuntu)
      run: sudo apt-get -y install libudev-dev libx11-dev libxrandr-dev libxcursor-dev libgl1-mesa-dev
      if: matrix.os == 'ubuntu-latest'

    - name: Check if Vcpkg is integrated (Ubuntu)
      run: |
        if [ -f "vcpkg/.vcpkg_integrated" ]; then
          echo "Vcpkg is already integrated."
        else
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg integrate install
          cd ..
        fi
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

    - name: Check if Vcpkg is integrated (Windows)
      shell: cmd
      run: |
        if exist vcpkg\.vcpkg_integrated (
          echo Vcpkg is already integrated.
        ) else (
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
          cd ..
        )
      if: matrix.os == 'windows-latest'

    - name: Install Asio and SFML using Vcpkg (Ubuntu & macOS)
      run: |
        cd vcpkg
        ./vcpkg install asio sfml
        cd ..
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

    - name: Install Asio and SFML using vcpkg (Windows)
      run: |
        cd vcpkg
        bootstrap-vcpkg.bat
        vcpkg integrate install
        vcpkg install asio sfml
        cd ..
      if: matrix.os == 'windows-latest'

    - name: Configure and build
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake ..
        cmake --build .
        cd ..
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest' || matrix.os == 'windows-latest'

    - name: Clean installation (Ubuntu, macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: rm -rf build

    - name: Clean installation (Windows)
      run: Remove-Item -Path "build" -Recurse -Force
      if: matrix.os == 'windows-latest'
