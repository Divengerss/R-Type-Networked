name: Compilation CMake multi-platform

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        cmake_version: [3.21.2]

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Restore Vcpkg cache (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v2
      with:
        path: vcpkg/packages
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg/vcpkg.json') }}
        restore-keys: vcpkg-${{ runner.os }}-

    - name: Restore Vcpkg cache (Linux and macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      uses: actions/cache@v2
      with:
        path: vcpkg/packages
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg/vcpkg.json') }}
        restore-keys: vcpkg-${{ runner.os }}-

    - name: Restore CMake and libtool cache (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v2
      with:
        path: |
          CMake/
          libtool/
        key: dependencies-${{ runner.os }}
        restore-keys: dependencies-

    - name: Restore CMake and libtool cache (Linux and macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      uses: actions/cache@v2
      with:
        path: |
          CMake/
          libtool/
        key: dependencies-${{ runner.os }}
        restore-keys: dependencies-

    - name: Initialize and update vcpkg submodule
      run: git submodule update --init --recursive
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

    - name: Check CMake installation
      run: cmake --version
      continue-on-error: true

    - name: Install CMake if not installed
      run: |
        if [ $? -ne 0 ]; then
          sudo apt-get -y update
          sudo apt-get -y install cmake
          echo "CMake installed"
        fi

    - name: Install CMake (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        if [ $? -ne 0 ]; then
          brew install cmake
          echo "CMake installed"
        fi

    - name: Install CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if [ $? -ne 0 ]; then
          choco install cmake --version ${{ matrix.cmake_version }} --install-arguments 'ADD_CMAKE_TO_PATH=System'
          echo "CMake installed"
        fi

    - name: Check if libtool is installed
      run: libtool --version
      continue-on-error: true

    - name: Install Libtools (Ubuntu)
      run: |
        if [ $? -ne 0 ]; then
          sudo apt-get -y install autoconf automake libtool pkg-config
          echo "Libtools installed"
        fi
      if: matrix.os == 'ubuntu-latest'

    - name: Install Libtools (macOS)
      run: |
        if [ $? -ne 0 ]; then
          brew install autoconf automake libtool pkg-config
          echo "Libtools installed"
        fi
      if: matrix.os == 'macOS-latest'

    - name: Check X libraries & OpenGL installation
      run: dpkg -l | grep libudev-dev && dpkg -l | grep libx11-dev && dpkg -l | grep libxrandr-dev && dpkg -l | grep libxcursor-dev && dpkg -l | grep libgl1-mesa-dev
      continue-on-error: true

    - name: Install system X libraries and OpenGL (Ubuntu)
      run: |
        if [ $? -ne 0 ]; then
          sudo apt-get -y update
          sudo apt-get -y install libudev-dev libx11-dev libxrandr-dev libxcursor-dev libgl1-mesa-dev
          echo "Xlibs & OpenGL installed"
        fi
      if: matrix.os == 'ubuntu-latest'

    - name: Check if Vcpkg is integrated (Ubuntu)
      run: |
        if [ -f "vcpkg/.vcpkg_integrated" ]; then
          echo "Vcpkg is already integrated."
        else
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg integrate install
          cd ..
        fi
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

    - name: Check if Vcpkg is integrated (Windows)
      shell: cmd
      run: |
        if exist vcpkg\.vcpkg_integrated (
          echo Vcpkg is already integrated.
          ) else (
            cd vcpkg
            .\bootstrap-vcpkg.bat
            .\vcpkg integrate install
            cd ..
            )
      if: matrix.os == 'windows-latest'

    - name: Install Asio and SFML using Vcpkg (Ubuntu & macOS)
      run: |
        cd vcpkg
        ./vcpkg install asio sfml
        cd ..
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

    - name: Install Asio and SFML using vcpkg (Windows)
      run: |
        cd vcpkg
        bootstrap-vcpkg.bat
        vcpkg integrate install
        vcpkg install asio sfml
        cd ..
      if: matrix.os == 'windows-latest'

    - name: Configure and build
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake ..
        cmake --build .
        cd ..
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest' || matrix.os == 'windows-latest'
    
    - name: Clean installation
      run: rm -rf build
